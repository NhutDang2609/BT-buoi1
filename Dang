Dưới đây là phiên bản tối giản và dễ hiểu hơn, vẫn đảm bảo các yêu cầu của bài tập:

Mã chương trình tối giản

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct MON_HOC {
    char ma_mon[10];
    float diem;
};

struct SINH_VIEN {
    char mssv[20];
    char hoten[30];
    char gioitinh[5];
    int somon;
    struct MON_HOC* monhoc;
};

struct LOP_HOC {
    char malop[20];
    char tenlop[50];
    int siso;
    struct SINH_VIEN* ds_sinhvien;
};

int main() {
    int n;
    printf("Nhap so luong lop hoc: ");
    scanf("%d", &n);

    struct LOP_HOC* ds_lop = (struct LOP_HOC*)malloc(n * sizeof(struct LOP_HOC));
    for (int i = 0; i < n; i++) {
        printf("\nNhap thong tin lop hoc %d:\n", i + 1);
        nhap_lop_hoc(&ds_lop[i]);
    }

    ghi_danh_sach_lop_hoc("lop_hoc.dat", ds_lop, n);

    struct LOP_HOC* ds_lop_doc;
    int so_lop_doc;
    doc_danh_sach_lop_hoc("lop_hoc.dat", &ds_lop_doc, &so_lop_doc);

    printf("\nThong ke nam/nữ:\n");
    thong_ke_nam_nu(ds_lop_doc, so_lop_doc);

    printf("\nThong ke sinh vien no mon:\n");
    thong_ke_no_mon(ds_lop_doc, so_lop_doc);

    free(ds_lop);
    free(ds_lop_doc);
    return 0;
}


void nhap_sinh_vien(struct SINH_VIEN* sv) {
    printf("Nhap MSSV: ");
    scanf("%s", sv->mssv);
    printf("Nhap ho ten: ");
    getchar(); 
    fgets(sv->hoten, sizeof(sv->hoten), stdin);
    sv->hoten[strcspn(sv->hoten, "\n")] = '\0';
    printf("Nhap gioi tinh (Nam/Nu): ");
    scanf("%s", sv->gioitinh);
    printf("Nhap so mon hoc: ");
    scanf("%d", &sv->somon);

    sv->monhoc = (struct MON_HOC*)malloc(sv->somon * sizeof(struct MON_HOC));
    for (int i = 0; i < sv->somon; i++) {
        printf("Nhap ma mon %d: ", i + 1);
        scanf("%s", sv->monhoc[i].ma_mon);
        printf("Nhap diem: ");
        scanf("%f", &sv->monhoc[i].diem);
    }
}


void xuat_sinh_vien(struct SINH_VIEN sv) {
    printf("MSSV: %s, Ho ten: %s, Gioi tinh: %s\n", sv.mssv, sv.hoten, sv.gioitinh);
    printf("Danh sach mon hoc:\n");
    for (int i = 0; i < sv.somon; i++) {
        printf("  Ma mon: %s, Diem: %.2f\n", sv.monhoc[i].ma_mon, sv.monhoc[i].diem);
    }
}


void nhap_lop_hoc(struct LOP_HOC* lh) {
    printf("Nhap ma lop: ");
    scanf("%s", lh->malop);
    printf("Nhap ten lop: ");
    getchar(); 
    fgets(lh->tenlop, sizeof(lh->tenlop), stdin);
    lh->tenlop[strcspn(lh->tenlop, "\n")] = '\0';
    printf("Nhap si so: ");
    scanf("%d", &lh->siso);

    lh->ds_sinhvien = (struct SINH_VIEN*)malloc(lh->siso * sizeof(struct SINH_VIEN));
    for (int i = 0; i < lh->siso; i++) {
        printf("\nNhap thong tin sinh vien %d:\n", i + 1);
        nhap_sinh_vien(&lh->ds_sinhvien[i]);
    }
}

void xuat_lop_hoc(struct LOP_HOC lh) {
    printf("\nMa lop: %s, Ten lop: %s, Si so: %d\n", lh.malop, lh.tenlop, lh.siso);
    printf("Danh sach sinh vien:\n");
    for (int i = 0; i < lh.siso; i++) {
        xuat_sinh_vien(lh.ds_sinhvien[i]);
    }
}


void ghi_danh_sach_lop_hoc(const char* filename, struct LOP_HOC* ds_lop, int n) {
    FILE* file = fopen(filename, "wb");
    fwrite(&n, sizeof(int), 1, file); 
    for (int i = 0; i < n; i++) {
        fwrite(&ds_lop[i], sizeof(struct LOP_HOC), 1, file);
        fwrite(ds_lop[i].ds_sinhvien, sizeof(struct SINH_VIEN), ds_lop[i].siso, file);
    }
    fclose(file);
}

void doc_danh_sach_lop_hoc(const char* filename, struct LOP_HOC** ds_lop, int* n) {
    FILE* file = fopen(filename, "rb");
    fread(n, sizeof(int), 1, file);
    *ds_lop = (struct LOP_HOC*)malloc((*n) * sizeof(struct LOP_HOC));
    for (int i = 0; i < *n; i++) {
        fread(&(*ds_lop)[i], sizeof(struct LOP_HOC), 1, file);
        (*ds_lop)[i].ds_sinhvien = (struct SINH_VIEN*)malloc((*ds_lop)[i].siso * sizeof(struct SINH_VIEN));
        fread((*ds_lop)[i].ds_sinhvien, sizeof(struct SINH_VIEN), (*ds_lop)[i].siso, file);
    }
    fclose(file);
}

void thong_ke_nam_nu(struct LOP_HOC* ds_lop, int n) {
    for (int i = 0; i < n; i++) {
        int nam = 0, nu = 0;
        for (int j = 0; j < ds_lop[i].siso; j++) {
            if (strcmp(ds_lop[i].ds_sinhvien[j].gioitinh, "Nam") == 0) nam++;
            else if (strcmp(ds_lop[i].ds_sinhvien[j].gioitinh, "Nu") == 0) nu++;
        }
        printf("Lop %s: Nam: %d, Nu: %d\n", ds_lop[i].malop, nam, nu);
    }


void thong_ke_no_mon(struct LOP_HOC* ds_lop, int n) {
    for (int i = 0; i < n; i++) {
        printf("Lop %s - Sinh vien no mon:\n", ds_lop[i].malop);
        for (int j = 0; j < ds_lop[i].siso; j++) {
            int no_mon = 0;
            for (int k = 0; k < ds_lop[i].ds_sinhvien[j].somon; k++) {
                if (ds_lop[i].ds_sinhvien[j].monhoc[k].diem < 5) no_mon++;
            }
            if (no_mon > 0) {
                printf("  Sinh vien: %s - So mon no: %d\n", ds_lop[i].ds_sinhvien[j].hoten, no_mon);
            }
        }
    }
}

